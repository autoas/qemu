
r'''
set LL_DL=64
scons --cpl=QemuVersatilepbGCC --app=VersatilepbFlashDriver
scons --cpl=QemuVersatilepbGCC --app=VersatilepbCanApp
scons --cpl=QemuVersatilepbGCC --app=VersatilepbCanBL
build\nt\GCC\Loader\Loader.exe -a build\nt\QemuVersatilepbGCC\VersatilepbCanApp\VersatilepbCanApp.s19 -s 1043456
build\nt\GCC\Loader\Loader.exe -f build\nt\QemuVersatilepbGCC\VersatilepbFlashDriver\VersatilepbFlashDriver.s19 -s 4096

scons --cpl=QemuVersatilepbGCC --app=VersatilepbCanBLRun
build\nt\GCC\Loader\Loader.exe -a build\nt\QemuVersatilepbGCC\VersatilepbCanApp\VersatilepbCanApp.s19.sign -f build\nt\QemuVersatilepbGCC\VersatilepbFlashDriver\VersatilepbFlashDriver.s19.sign -l %LL_DL%

qemu-system-arm.exe -m 128 -M versatilepb -kernel build/nt/QemuVersatilepbGCC/VersatilepbCanBL/VersatilepbCanBL.exe -serial stdio -serial tcp:127.0.0.1:9000,server
'''


from building import *

generate(Glob('config/*.json'))


@register_compiler
def CompilerQemuVersatilepbGCC(**kwargs):
    env = CreateCompiler('ArmGCC')
    return env


for sc in Glob('*/SConscript'):
    SConscript(sc)

CWD = GetCurrentDir()

Import('BUILD_DIR')

ApplicationCanBL = query_application('CanBL')
ApplicationCanApp = query_application('CanApp')

objsKey = Glob('%s/app/platform/simulator/src/Key.c' % (RootDir))
objsOta = Glob('%s/app/platform/simulator/src/ota.c' % (RootDir))

objs = Glob('*/*.c')

objsAsm = Glob('*/*.S')

objsPci = Glob('bsp/pci/*.c')

Os_Cfg = Glob('config/GEN/Os*.c')


@register_library
class LibraryVersatilepb(Library):
    def config(self):
        self.include = '%s/bsp' % (CWD)
        self.Append(CPPDEFINES=['OS_TICKS_PER_SECOND=100'])
        self.LIBS = ['QemuArmInt', 'gcc']
        self.CPPPATH = ['$INFRAS']
        self.source = objs


@register_application
class ApplicationVersatilepbCanBL(ApplicationCanBL):
    compiler = 'QemuVersatilepbGCC'

    def platform_config(self):
        self.LIBS += ['Versatilepb', 'LibC']
        self.Append(CPPDEFINES=['USE_STD_DEBUG', 'USE_BL', 'FLASH_DRIVER_STARTADDRESS=0x00140000',
                                'FL_USE_WRITE_WINDOW_BUFFER', 'BL_FINGER_PRINT_ADDRESS=0x0013fc00',
                                'BL_FLSDRV_MEMORY_LOW=0x00140000', 'BL_FLSDRV_MEMORY_HIGH=0x00141000',
                                'BL_APP_MEMORY_LOW=0x00040000', 'BL_APP_MEMORY_HIGH=0x00140000'])
        self.Append(CPPDEFINES=['CANTP_CFG_N_Cr=5000'])
        self.Append(CPPFLAGS=['-mcpu=arm926ej-s', '-marm'])
        self.Append(ASFLAGS=['-mcpu=arm926ej-s', '-marm'])
        self.Append(LINKFLAGS=['-T', '%s/linker-boot.lds' % (CWD),
                               '-Map', '%s/VersatilepbCanBL.map' % (BUILD_DIR)])
        appObj = '%s/../VersatilepbCanApp/VersatilepbCanApp.o' % (BUILD_DIR)
        self.source += [appObj] + objsAsm + objsOta


flsObjs = Glob('../flash/*.c')


@register_application
class ApplicationVersatilepbFlashDriver(Application):
    compiler = 'QemuVersatilepbGCC'

    def signit(self):
        sign = os.path.abspath('%s/../../GCC/Loader/Loader' %
                               (BUILD_DIR))
        if IsPlatformWindows():
            sign += '.exe'
        if os.path.isfile(sign):
            target = '%s/VersatilepbFlashDriver' % (BUILD_DIR)
            s19T = target + '.s19'
            cmd = '%s -f %s -s 4096' % (sign, s19T)
            self.AddPostAction(cmd)

    def config(self):
        self.CPPPATH = ['$INFRAS']
        self.Append(
            CPPDEFINES=['FLS_START_ADDRESS=0x00040000', 'FLS_END_ADDRESS=0x00140000'])
        self.Append(CPPFLAGS=['-mcpu=arm926ej-s', '-marm'])
        self.Append(ASFLAGS=['-mcpu=arm926ej-s', '-marm'])
        self.Append(LINKFLAGS=['-T', '%s/linker-flsdrv.lds' % (CWD),
                               '-Map', '%s/VersatilepbFlashDriver.map' % (BUILD_DIR)])
        self.source = flsObjs
        self.signit()


@register_application
class ApplicationVersatilepbCanBLRun(Application):
    def config(self):
        pass

    def build(self):
        qemu = Qemu(arch='arm', CAN0=True)
        target = '%s/VersatilepbCanBL' % (BUILD_DIR[:-3])
        if (IsPlatformWindows()):
            target = target + '.exe'
        qemu.Run('-m 128 -M versatilepb -kernel %s' % (target))


@register_application
class ApplicationVersatilepbCanApp(ApplicationCanApp):
    compiler = 'QemuVersatilepbGCC'

    def signit(self):
        sign = os.path.abspath('%s/../../GCC/Loader/Loader' %
                               (BUILD_DIR))
        if IsPlatformWindows():
            sign += '.exe'
        if os.path.isfile(sign):
            target = '%s/VersatilepbCanApp' % (BUILD_DIR)
            s19T = target + '.s19'
            cmd = '%s -a %s -s 1047552' % (sign, s19T)
            self.AddPostAction(cmd)
            env = self.ensure_env()
            cplPath = os.path.dirname(env['CC'])

            binT = target + '.bin'
            objT = target + '.o'
            symName = binT.replace(':', '_').replace(
                '/', '_').replace('\\', '_').replace('.', '_')
            cmd = '%s/arm-none-eabi-objcopy -I binary -O elf32-littlearm %s %s --binary-architecture arm' % (
                cplPath, binT, objT)
            self.AddPostAction(cmd)
            cmd = '%s/arm-none-eabi-objcopy -I elf32-littlearm -O elf32-littlearm %s %s' \
                  ' --rename-section .data=.app --redefine-sym _binary_%s_start=._app_start' \
                  ' --redefine-sym _binary_%s_end=._app_end --redefine-sym _binary_%s_size=._app_size' % (
                      cplPath, objT, objT, symName, symName, symName)
            self.AddPostAction(cmd)

    def platform_config(self):
        self.source += objsKey
        self.LIBS += ['Versatilepb', 'LibC', 'OSAL', 'Shell', 'StdTimer']
        self.Append(CPPDEFINES=['USE_SHELL', 'USE_STBM_DFT', 'USE_STD_TIME_64'])
        self.Append(CPPDEFINES=['USE_STD_DEBUG', 'BL_FLSDRV_MEMORY_LOW=0x00140000'])
        self.Append(CPPFLAGS=['-mcpu=arm926ej-s', '-marm'])
        self.Append(ASFLAGS=['-mcpu=arm926ej-s', '-marm'])
        self.Append(LINKFLAGS=['-T', '%s/linker-app.lds' % (CWD),
                               '-Map', '%s/VersatilepbCanApp.map' % (BUILD_DIR)])
        self.SelectOS(arch='arm', config=Os_Cfg, CPPDEFINES=['OS_STK_SIZE_SCALER=4', 'USE_OSAL'])
        self.signit()

    def config(self):
        super().config()
        for libName in ['Dem', 'Fls', 'Fee', 'NvM', 'Eep', 'Ea']:
            if libName in self.LIBS:
                self.LIBS.remove(libName)
            macro = 'USE_%s' % (libName.upper())
            self.Remove(CPPDEFINES=macro)


@register_application
class ApplicationVersatilepbCanAppRun(Application):
    def config(self):
        pass

    def build(self):
        qemu = Qemu(arch='arm', CAN0=True)
        target = '%s/VersatilepbCanApp' % (BUILD_DIR[:-3])
        if (IsPlatformWindows()):
            target = target + '.exe'
        qemu.Run('-m 128 -M versatilepb -kernel %s' % (target))
